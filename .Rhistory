# Set the seed for reproducibility
set.seed(1)
# Generate an index vector for sampling
index <- sample(1:nrow(mpg_df), size = nrow(mpg_df), replace = FALSE)
# Split the data into two equal parts
train <- mpg_df[index[1:(nrow(mpg_df)/2)], ]
test <- mpg_df[index[((nrow(mpg_df)/2) + 1):nrow(mpg_df)], ]
# fit a linear regression model
lm_fit <- glm(mpg~., data = train)
summary(lm_fit)
lm_fit
# Split the data into two equal parts
train <- mpg_df[index[1:(nrow(mpg_df)/2)], ]
View(train)
library(tree)
tree_fit <- lm(mpg ~ ., data = train)
summary(tree_fit)
tree_fit <- tree(mpg ~ ., data = train)
summary(tree_fit)
plot(tree_fit)
> text(tree_fit , pretty = 0)
text(tree_fit , pretty = 0)
plot(tree_fit)
text(tree_fit , pretty = 0)
par(mfrow = c(1, 2))
plot(tree_fit)
text(tree_fit , pretty = 0)
par(mfrow = c(1, 2))
plot(tree_fit)
text(tree_fit , pretty = 0)
plot(tree_fit)
plot(tree_fit)
text(tree_fit, pretty = 0)
# Plot the tree
plot(tree_fit)
text(tree_fit, pretty = 0)
plot(tree_fit)
text(tree_fit, pretty = 0)
# Plot the tree
plot(tree_fit)
text(tree_fit, pretty = 0)
library(tree)
tree_fit <- tree(mpg ~ ., data = train)
summary(tree_fit)
# Plot the tree
plot(tree_fit)
text(tree_fit, pretty = 0)
cv.mpg <- cv.tree(tree_fit, FUN = prune.misclass)
cv.mpg <- cv.tree(tree_fit)
plot(cv.mpg$size , cv.mpg$dev, type = "b")
cv.mpg
plot(cv.mpg$size , cv.mpg$dev, type = "b")
library(tree)
# Fit the regression tree model
tree_fit <- tree(mpg ~ ., data = train)
# Compute the testMSE using LOOCV
cv_results <- cv.tree(tree_fit, FUN = function(tree_fit, k) {
mean((tree_fit$residuals[-k])^2)
})
library(tree)
# Fit the regression tree model
tree_fit <- tree(mpg ~ ., data = train)
# Compute the testMSE using LOOCV
cv_results <- cv.tree(tree_fit, FUN = function(tree_fit, k) {
mean((tree_fit$residuals[-k])^2)
})
library(tree)
# Fit the regression tree model
tree_fit <- tree(mpg ~ ., data = train)
# Compute the testMSE using LOOCV
cv_results <- cv.tree(tree_fit, FUN = function(tree_fit, k) {
mean((tree_fit$residuals[-k])^2)
})
cv.mpg
gam.lo <- gam(
wage ∼ s(year , df = 4) + lo(age , span = 0.7) + education ,
gam.lo <- gam(
wage ~ s(year , df = 4) + lo(age , span = 0.7) + education ,
data = Wage
)
library(gam)
gam.m3 <- gam(wage ~ s(year , 4) + s(age , 5) + education ,
data = Wage)
par(mfrow = c(1, 3))
plot(gam.m3, se = TRUE , col = "blue")
plot.Gam(gam1 , se = TRUE , col = "red")
gam.lo <- gam(
wage ~ s(year , df = 4) + lo(age , span = 0.7) + education ,
data = Wage
)
plot.Gam(gam.lo, se = TRUE , col = "green")
gam.lo <- gam(
wage ~ s(year , df = 4) + lo(age , span = 0.7) + education ,
data = Wage
)
library(ISLR)
library(tidyverse)
view(USArrests)
states <- row.names(USArrests)
gam.lo <- gam(
wage ~ s(year , df = 4) + lo(age , span = 0.7) + education ,
data = Wage
)
plot.Gam(gam.lo, se = TRUE , col = "green")
gam.lo.i <- gam(wage ∼ lo(year , age , span = 0.5) + education ,
gam.lo.i <- gam(wage ~ lo(year , age , span = 0.5) + education ,
data = Wage)
library(akima)
plot(gam.lo.i)
gam.lr <- gam(
I(wage > 250) ∼ year + s(age , df = 5) + education ,
gam.lr <- gam(
I(wage > 250) ~ year + s(age , df = 5) + education ,
family = binomial , data = Wage
)
par(mfrow = c(1, 3))
plot(gam.lr, se = T, col = "green")
library(tree)
library(ISLR2)
attach(Carseats)
High <- factor(ifelse(Sales <= 8, "No", "Yes"))
Carseats <- data.frame(Carseats , High)
Carseats <- data.frame(Carseats , High)
tree.carseats <- tree(High ∼ . - Sales, Carseats)
tree.carseats <- tree(High ~ . - Sales, Carseats)
plot(tree.carseats)
tree.carseats <- tree(High ~ . - Sales, Carseats)
plot(tree.carseats)
text(tree.carseats , pretty = 0)
library(tree)
library(ISLR2)
attach(Carseats)
High <- factor(ifelse(Sales <= 8, "No", "Yes"))
Carseats <- data.frame(Carseats , High)
Carseats <- data.frame(Carseats , High)
tree.carseats <- tree(High ~ . - Sales, Carseats)
plot(tree.carseats)
library(tree)
library(ISLR2)
attach(Carseats)
High <- factor(ifelse(Sales <= 8, "No", "Yes"))
Carseats <- data.frame(Carseats , High)
Carseats <- data.frame(Carseats , High)
tree.carseats <- tree(High ~ . - Sales, Carseats)
plot(tree.carseats)
text(tree.carseats , pretty = 0)
library(tree)
library(ISLR2)
attach(Carseats)
High <- factor(ifelse(Sales <= 8, "No", "Yes"))
Carseats <- data.frame(Carseats , High)
Carseats <- data.frame(Carseats , High)
tree.carseats <- tree(High ~ . - Sales, Carseats)
plot(tree.carseats)
text(tree.carseats , pretty = 0)
library(tree)
library(ISLR2)
attach(Carseats)
High <- factor(ifelse(Sales <= 8, "No", "Yes"))
Carseats <- data.frame(Carseats , High)
Carseats <- data.frame(Carseats , High)
tree.carseats <- tree(High ~ . - Sales, Carseats)
plot(tree.carseats)
text(tree.carseats , pretty = 0)
library(tree)
library(ISLR2)
attach(Carseats)
High <- factor(ifelse(Sales <= 8, "No", "Yes"))
Carseats <- data.frame(Carseats , High)
Carseats <- data.frame(Carseats , High)
tree.carseats <- tree(High ~ . - Sales, Carseats)
plot(tree.carseats)
text(tree.carseats , pretty = 0)
library(tree)
library(ISLR2)
attach(Carseats)
High <- factor(ifelse(Sales <= 8, "No", "Yes"))
Carseats <- data.frame(Carseats , High)
Carseats <- data.frame(Carseats , High)
tree.carseats <- tree(High ~ . - Sales, Carseats)
plot(tree.carseats)
text(tree.carseats , pretty = 0)
library(tree)
library(ISLR2)
attach(Carseats)
High <- factor(ifelse(Sales <= 8, "No", "Yes"))
Carseats <- data.frame(Carseats , High)
Carseats <- data.frame(Carseats , High)
tree.carseats <- tree(High ~ . - Sales, Carseats)
plot(tree.carseats)
text(tree.carseats , pretty = 0)
library(tree)
library(ISLR2)
attach(Carseats)
High <- factor(ifelse(Sales <= 8, "No", "Yes"))
Carseats <- data.frame(Carseats , High)
Carseats <- data.frame(Carseats , High)
tree.carseats <- tree(High ~ . - Sales, Carseats)
plot(tree.carseats)
text(tree.carseats , pretty = 0)
library(tree)
library(ISLR2)
attach(Carseats)
High <- factor(ifelse(Sales <= 8, "No", "Yes"))
Carseats <- data.frame(Carseats , High)
Carseats <- data.frame(Carseats , High)
tree.carseats <- tree(High ~ . - Sales, Carseats)
plot(tree.carseats)
text(tree.carseats , pretty = 0)
library(tree)
library(ISLR2)
attach(Carseats)
High <- factor(ifelse(Sales <= 8, "No", "Yes"))
Carseats <- data.frame(Carseats , High)
Carseats <- data.frame(Carseats , High)
tree.carseats <- tree(High ~ . - Sales, Carseats)
plot(tree.carseats)
text(tree.carseats , pretty = 0)
library(tree)
library(ISLR2)
attach(Carseats)
High <- factor(ifelse(Sales <= 8, "No", "Yes"))
Carseats <- data.frame(Carseats , High)
Carseats <- data.frame(Carseats , High)
tree.carseats <- tree(High ~ . - Sales, Carseats)
plot(tree.carseats)
text(tree.carseats , pretty = 0)
library(tree)
library(ISLR2)
attach(Carseats)
High <- factor(ifelse(Sales <= 8, "No", "Yes"))
Carseats <- data.frame(Carseats , High)
Carseats <- data.frame(Carseats , High)
tree.carseats <- tree(High ~ . - Sales, Carseats)
plot(tree.carseats)
text(tree.carseats , pretty = 0)
tree.carseats <- tree(High ~ . - Sales, Carseats)
summary(tree.carseats)
plot(tree.carseats)
text(tree.carseats , pretty = 0)
library(tree)
library(ISLR2)
attach(Carseats)
Carseats
view(Carseats)
?Carseats
High <- factor(ifelse(Sales <= 8, "No", "Yes"))
Carseats <- data.frame(Carseats , High)
tree.carseats <- tree(High ~ . - Sales, Carseats)
summary(tree.carseats)
plot(tree.carseats)
High <- factor(ifelse(Sales <= 8, "No", "Yes"))
Carseats <- data.frame(Carseats , High)
tree.carseats <- tree(High ~ . - Sales, Carseats)
summary(tree.carseats)
library(tree)
library(ISLR2)
attach(Carseats)
view(Carseats)
High <- factor(ifelse(Sales <= 8, "No", "Yes"))
Carseats <- data.frame(Carseats , High)
tree.carseats <- tree(High ~ . - Sales, Carseats)
summary(tree.carseats)
plot(tree.carseats)
text(tree.carseats , pretty = 0)
library(fpp3)
library(tidyverse)
library(lubridate)
library(tidyverse)
sim_norm <- function(N, mu = 1, sigma =1){
x <- rnorm(N)
mu <- sum(x)/length(x)
return(mu)
}
sim_norm(N = 10)
sim_norm( mu = 15)
sim_norm(N= 10, mu = 15)
M <- 20
sample_mean <- vector("numeric", length = M)
for(i in M){
sim_norm(n=10)
}
for(i in M){
sim_norm <- function(N, mu = 1, sigma =1){
x <- rnorm(N)
mu <- sum(x)/length(x)
return(mu)
}
sim_norm(N=10)
}
for(i in M){
sim_norm <- function(N, mu = 1, sigma =1){
x <- rnorm(N)
mu <- sum(x)/length(x)
return(mu)
}
sim_norm(N=10)
sim_norm <- function(N, mu = 1, sigma =1){
x <- rnorm(N)
mu <- sum(x)/length(x)
return(mu)
}
sim_norm(N=10)
i in M
i in length(M)
M <- 20
i in length(sample_mean)
ength(sample_mean)
length(sample_mean)
i in length(sample_mean)
sim_norm <- function(N, mu = 1, sigma =1){
x <- rnorm(N)
mu <- sum(x)/length(x)
return(mu)
}
sim_norm(N=10)
for(i in length(sample_mean)){
sim_norm <- function(N, mu = 1, sigma =1){
x <- rnorm(N)
mu <- sum(x)/length(x)
return(mu)
}
sim_norm(N=10)
}
for(i in 1:length(M)){
sample_mean[i] <- sim_norm(n=10)
}
for(i in 1:length(M)){
sample_mean[i] <- sim_norm(N=10)
}
sample_mean
sim_norm <- function(N, mu = 1, sigma =1){
x <- rnorm(N, mean = mu, sd = sigma)
mu <- sum(x)/length(x)
return(mu)
}
sim_norm(N = 10)
sim_norm(N= 10, mu = 15)
M <- 20
sample_mean <- vector("numeric", length = M)
for(i in 1:length(M)){
sample_mean[i] <- sim_norm(N=10)
}
for(i in 1:length(M)){
sim_norm(N=10)
}
for(i in 1:20){
sim_norm(N=10)
}
sim_norm <- function(N, mu = 0, sigma = 1){
x <- rnorm(N, mean = mu, sd = sigma)
calculated_mean <- sum(x)/N
return(calculated_mean)
}
# Initialize a vector to store the results
results <- numeric(20)
# Loop through 1 to 20 and store the results
for(i in 1:20){
results[i] <- sim_norm(N=10)
}
library(tidyverse)
sqrt(sum((N - mu)^2)/20)
sim_norm <- function(N, mu = 1, sigma =1){
x <- rnorm(N, mean = mu, sd = sigma)
mu <- sum(x)/length(x)
return(mu)
}
sim_norm(N = 10)
sim_norm(N= 10, mu = 15)
M <- 20
sample_mean <- vector("numeric", length = M)
for(i in 1:20){
sim_norm(N=10)
}
for(i in 1:20){
sample_mean[i] <-sim_norm(N=10)
}
N_values <- seq(10, 200, by = 10)
simexp <- tibble(
N = N_values,
st_dev = NA_real_,
sigma = 1
)
simexp <- simexp %>%
mutate(theoretical = sigma / sqrt(N))
View(simexp)
N_values <- seq(10, 200, by = 2)
simexp <- tibble(
N = N_values,
st_dev = NA_real_,
sigma = 1
)
simexp <- simexp %>%
mutate(theoretical = sigma / sqrt(N))
for (
i in nrow(simexp)) {
sim_norm <- function(N, mu = 1, sigma =1){
x <- rnorm(N, mean = mu, sd = sigma)
mu <- sum(x)/length(x)
sigma <- sd(x)
return(mu)
}
for (
i in nrow(simexp)) {
sim_norm <- function(N, mu = 1, sigma =1){
x <- rnorm(N, mean = mu, sd = sigma)
mu <- sum(x)/length(x)
sigma <- sd(x)
return(sd)
}
sim_norm <- function(N, mu = 1, sigma =1){
x <- rnorm(N, mean = mu, sd = sigma)
mu <- sum(x)/length(x)
sigma <- sd(x)
return(sd)
}
sim_norm(10)
sim_norm(N= 10)
sim_norm <- function(N, mu = 1, sigma =1){
x <- rnorm(N, mean = mu, sd = sigma)
mu <- sum(x)/length(x)
sigma <- sd(x)
return(sd)
}
library(tidyverse)
sqrt(sum((N - mu)^2)/20)
sim_norm <- function(N, mu = 1, sigma =1){
x <- rnorm(N, mean = mu, sd = sigma)
mu <- sum(x)/length(x)
return(mu)
}
sim_norm(N = 10)
sim_norm(N= 10, mu = 15)
M <- 20
sample_mean <- vector("numeric", length = M)
for(i in 1:20){
sample_mean[i] <-sim_norm(N=10)
}
N_values <- seq(10, 200, by = 2)
simexp <- tibble(
N = N_values,
st_dev = NA_real_,
sigma = 1
)
simexp <- simexp %>%
mutate(theoretical = sigma / sqrt(N))
for (
i in nrow(simexp)) {
sim_norm <- function(N, mu = 1, sigma =1){
x <- rnorm(N, mean = mu, sd = sigma)
mu <- sum(x)/length(x)
sigma <- sd(x)
return(sd)
}
sim_norm()
}
library(tidyverse)
sqrt(sum((N - mu)^2)/20)
sim_norm <- function(N, mu = 1, sigma =1){
x <- rnorm(N, mean = mu, sd = sigma)
mu <- sum(x)/length(x)
return(mu)
}
sim_norm(N = 10)
sim_norm(N= 10, mu = 15)
M <- 20
sample_mean <- vector("numeric", length = M)
for(i in 1:20){
sample_mean[i] <-sim_norm(N=10)
}
library(tidyverse)
sqrt(sum((N - mu)^2)/20)
sim_norm <- function(N, mu = 1, sigma =1){
x <- rnorm(N, mean = mu, sd = sigma)
mu <- sum(x)/length(x)
return(mu)
}
sim_norm(N = 10)
sim_norm(N= 10, mu = 15)
M <- 20
sample_mean <- vector("numeric", length = M)
for(i in 1:20){
sample_mean[i] <-sim_norm(N=10)
}
N_values <- seq(10, 200, by = 2)
simexp <- tibble(
N = N_values,
st_dev = NA_real_,
sigma = 1
)
simexp <- simexp %>%
mutate(theoretical = sigma / sqrt(N))
for (
i in nrow(simexp)) {
sim_norm <- function(N, mu = 1, sigma =1){
x <- rnorm(N, mean = mu, sd = sigma)
mu <- sum(x)/length(x)
sigma <- sd(x)
return(sd)
}
sim_norm()
}
sim_norm <- function(N, mu = 1, sigma =1){
x <- rnorm(N, mean = mu, sd = sigma)
mu <- sum(x)/length(x)
sigma <- sd(x)
return(sd)
}
sim_norm(N= 10)
setwd("F:/Fall_23/R_for_data_science/Git_bash")
x <- rnorm(100)
y <- rnorm(100)
